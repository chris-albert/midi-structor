import { app, BrowserWindow, powerSaveBlocker } from 'electron'
import log from 'electron-log/main'
import { Server } from '@midi-structor/server'
import express from 'express'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

powerSaveBlocker.start('prevent-display-sleep')
powerSaveBlocker.start('prevent-app-suspension')

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const run = (port: number, onProject: (raw: string) => void) => {
  const app = express()

  app.use(express.json())

  app.get('/ping', (req, res) => {
    log.info('Agent Server /ping')
    res.send('pong')
  })

  app.post('/project', (req, res) => {
    log.info(`Agent Server /project`)
    onProject(req.body)
    res.send('ok')
  })

  app.listen(port, () => {
    log.info(`Server listening on http://localhost:${port}`)
  })
}

app.setName('MIDI Structor')
const PORT = 3101
const loadServer = (onProject: (s: string) => void) => {
  log.info(`Attempting to start server on port ${PORT}`)
  run(PORT, (project: string) => {
    onProject(project)
  })
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    icon: './assets/icon.icns',
    height: 1024,
    width: 1024,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  log.info('MAIN_WINDOW_WEBPACK_ENTRY', MAIN_WINDOW_WEBPACK_ENTRY)

  log.info(
    'MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY',
    MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
  )

  loadServer((project) => {
    mainWindow.webContents.send('server-project', project)
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
